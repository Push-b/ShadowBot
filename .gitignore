node_modules
session
logs
.env
yarn.lock
package-lock.json




const YT = require('../../lib/YT3');
const yts = require('yt-search');

module.exports = {
    name: 'testing',
    aliases: ['d'],
    category: 'media',
    react: "‚úÖ",
    usage: 'Use :ytaudio <song_link>',
    description: 'Downloads given YouTube Video and sends it as Audio',
    async execute(client, arg, M) {
        try {
            const link = async (term) => {
                const { videos } = await yts(term.trim());
                if (!videos || !videos.length) return null;
                return videos[0];
            };

            if (!arg) return M.reply('Please use this command with a valid YouTube link');
            const linkData = await link(arg);
            const validPathDomains = /^https?:\/\/(youtu\.be\/|(www\.)?youtube\.com\/(embed|v|shorts)\/)/;
            const term = validPathDomains.test(arg) ? arg.trim() : linkData?.url;
            if (!term) return M.reply('Please use this command with a valid YouTube content link');

            M.reply(`üîä Downloading: ${linkData?.title}`);

            // Check if the video is longer than 30 minutes
            if (Number(linkData.seconds) > 1800) return M.reply('‚ùå Cannot download audio longer than 30 minutes');

            // Downloading and sending the audio
            const yt = await YT.ytmp3(term);

            if (!yt.status) {
                return M.reply(`‚ùå Failed to download audio:\n${yt.error || 'Unknown error'}`);
            }

            await client.sendMessage(
                M.from,
                {
                    audio: yt.buffer,
                    mimetype: 'audio/mpeg',
                    ptt: false,
                    contextInfo: {
                        externalAdReply: {
                            title: yt.title || linkData.title,
                            body: "üé∂ YouTube Audio",
                            thumbnail: yt.thumbnail || null,
                            mediaType: 2,
                            mediaUrl: term,
                            sourceUrl: term,
                            renderLargerThumbnail: true
                        }
                    }
                },
                { quoted: M }
            );
        } catch (error) {
            console.error(error);
            M.reply('‚ùå An error occurred while downloading the YouTube video audio.');
        }
    }
};






const YT = require('../../lib/YT3');
const yts = require('yt-search');
const axios = require('axios');

module.exports = {
    name: 'testing',
    aliases: ['d'],
    category: 'media',
    react: "‚úÖ",
    usage: 'Use :ytaudio <song_link or name>',
    description: 'Downloads given YouTube Video and sends it as Audio with thumbnail & link',
    async execute(client, arg, M) {
        try {
            if (!arg) return M.reply('‚ùó Please use this command with a YouTube link or song name.');

            const search = async (term) => {
                const { videos } = await yts(term.trim());
                return videos && videos.length ? videos[0] : null;
            };

            const validYT = /^https?:\/\/(youtu\.be\/|(www\.)?youtube\.com\/(embed|v|shorts|watch)\b)/;
            const isLink = validYT.test(arg.trim());
            const linkData = isLink ? null : await search(arg);
            const url = isLink ? arg.trim() : linkData?.url;

            if (!url) return M.reply('‚ùó Failed to find or parse a valid YouTube link.');

            const info = isLink ? await search(url) : linkData;
            if (!info) return M.reply('‚ùó Could not retrieve video details.');

            M.reply(`üéµ Downloading: *${info.title}*\nBy: *${info.author.name}*`);

            if (Number(info.seconds) > 1800)
                return M.reply('‚ùå Cannot download audio longer than 30 minutes.');

            const yt = await YT.ytmp3(url);
            if (!yt.status) return M.reply(`‚ùå Audio download failed:\n${yt.error || 'Unknown error'}`);

            // Fetch the thumbnail as a buffer
            const thumbBuffer = yt.thumbnail
                ? (await axios.get(yt.thumbnail, { responseType: 'arraybuffer' })).data
                : null;

            await client.sendMessage(
                M.from,
                {
                    audio: yt.buffer,
                    mimetype: 'audio/mpeg',
                    ptt: false,
                    contextInfo: {
                        externalAdReply: {
                            title: yt.title || info.title,
                            body: info.author.name || "YouTube Music",
                            thumbnail: thumbBuffer,
                            mediaType: 2,
                            mediaUrl: url,
                            sourceUrl: url,
                            renderLargerThumbnail: true
                        }
                    }
                },
                { quoted: M }
            );
        } catch (error) {
            console.error(error);
            M.reply('‚ùå An unexpected error occurred while downloading the YouTube audio.');
        }
    }
};





const YT = require('../../lib/YT3');
const yts = require('yt-search');
const axios = require('axios');

module.exports = {
    name: 'ytvideo',
    aliases: ['ytv', 'video'],
    category: 'media',
    react: "üìΩÔ∏è",
    usage: 'Use :ytvideo <YouTube link or song name>',
    description: 'Downloads a YouTube video (max 30 min) and sends it',
    async execute(client, arg, M) {
        try {
            if (!arg) return M.reply('‚ùó Please provide a YouTube link or search term.');

            const search = async (term) => {
                const { videos } = await yts(term.trim());
                return videos && videos.length ? videos[0] : null;
            };

            const validYT = /^https?:\/\/(youtu\.be\/|(www\.)?youtube\.com\/(embed|v|shorts|watch)\b)/;
            const isLink = validYT.test(arg.trim());
            const linkData = isLink ? null : await search(arg);
            const url = isLink ? arg.trim() : linkData?.url;

            if (!url) return M.reply('‚ùó Could not find a valid YouTube video.');

            const info = isLink ? await search(url) : linkData;
            if (!info) return M.reply('‚ùó Could not retrieve video details.');

            if (Number(info.seconds) > 1800)
                return M.reply('‚ùå Cannot download videos longer than 30 minutes.');

            M.reply(`üì• Downloading: *${info.title}*\nBy: *${info.author.name}*`);

            const yt = await YT.ytmp4(url);
            if (!yt.status) return M.reply(`‚ùå Video download failed:\n${yt.error || 'Unknown error'}`);

            await client.sendMessage(
                M.from,
                {
                    video: yt.buffer,
                    mimetype: 'video/mp4',
                    fileName: `${yt.title}.mp4`,
                    caption: `üé¨ *${yt.title}*\nüì∫ ${info.author.name}\nüîó ${url}`
                },
                { quoted: M }
            );
        } catch (error) {
            console.error(error);
            M.reply('‚ùå An error occurred while downloading the YouTube video.');
        }
    }
};
